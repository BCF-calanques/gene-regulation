# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("Fasta file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the 'dir' section of the config file")

## Define paths
#genome_version = config["genome"]["version"]
genome_file = os.path.join(config["dir"]["base"], config["dir"]["genome"], config["genome"]["fasta_file"])
bowtie2_dir = os.path.join(config["dir"]["base"], config["dir"]["genome"], "bowtie2")
bowtie2_index = os.path.join(config["dir"]["base"], config["dir"]["genome"], "bowtie2", config["genome"]["fasta_file"])


# Rule
rule bowtie2_index:
    """Rule for the creation of Bowtie 2 index. Has to be done only once.  The
    output file is used to test whether the index already exists
    when aligning.

    Required parameters:
        ...

    Optional parameters:

    Contributors: 
        Claire Rioualen
    """
    input: genome_file
    output: bowtie2_index
    params:
        dir = bowtie2_dir, \
        index_file = bowtie2_index, \
#        version = genome_version, \
        qsub = config["qsub"] \
          + " -e " + bowtie2_dir + "index_qsub.err" \
          + " -o " + bowtie2_dir + "index_qsub.out"
    log: bowtie2_index + ".log"
    benchmark: bowtie2_index + "_benchmark.json"
    shell: """
mkdir -p {params.dir}
cp {input} {params.dir}
bowtie2-build  {params.index_file}  {params.index_file} &> {log}
"""

