import sys

# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "diffexpr" in config["dir"].keys():
    sys.exit("The parameter dir/diffexpr must be defined in the config file")

if not "samples" in config["dir"].keys():
    sys.exit("The parameter dir/samples must be defined in the config file")

if not "samples" in config["metadata"].keys():
    sys.exit("The parameter metadata/samples must be defined in the config file")

#samples = read_table(os.path.join(config["dir"]["base"], config["metadata"]["samples"]))
sample_ids = read_table(os.path.join(config["dir"]["base"], config["metadata"]["samples"]))['ID']
sample_conditions = read_table(os.path.join(config["dir"]["base"], config["metadata"]["samples"]))['Condition']

sample_dir = os.path.join(config["dir"]["base"], config["dir"]["samples"])
diffexpr_dir = os.path.join(config["dir"]["base"], config["dir"]["diffexpr"])

# Define input files
def targetfiles_inputs(wildcards):
    count_files =  expand(sample_dir + "/{samples}/{samples}_featureCounts.txt", samples=sample_ids)
    return count_files

# Rule
rule sartools_targetfile:
    """
    This rule creates a so-called "targetfile", which is required by SARTools to run differential expression analyses
    with rules sartools_DESeq2 and sartools_edgeR.

    Required parameters:
        config["qsub"]
        config["dir"]["diffexpr"]

    Authors: 
        Claire Rioualen
    """
    input: 
        count_files = targetfiles_inputs
    output: diffexpr_dir + "/{test}_vs_{ref}/SARTools_targetfile.txt"
    params:
        qsub = config["qsub"]\
            + " -e " + diffexpr_dir + "/{test}_vs_{ref}/targetfile_qsub.err"\
            + " -o " + diffexpr_dir + "/{test}_vs_{ref}/targetfile_qsub.out"
    log: diffexpr_dir + "/{test}_vs_{ref}/SARTools_targetfile.log"
    benchmark: diffexpr_dir + "/{test}_vs_{ref}/SARTools_targetfile_benchmark.json"
    run:
#        sys.stdout = open('{log}', 'w')
        f = open(output[0], "w+")
        f.write("label\tfiles\tgroup\n")
        for id in range(len(sample_ids)):
            cond = sample_conditions[id]
            counts = expand(sample_ids[id] + "/" + sample_ids[id] + "_featureCounts.txt")
            f.write(sample_ids[id] + "\t" + counts[0] + "\t" + cond + "\n")
        f.close()
#        sys.stdout.close()





