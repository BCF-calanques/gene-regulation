# Check parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "configfile" in config["metadata"].keys():
    sys.exit("The parameter ['metadata']['configfile'] must be defined in the config file")

if not "results" in config["dir"].keys():
    sys.exit("The parameter ['dir']['results'] must be defined in the config file")

if not "reports" in config["dir"].keys():
    config["dir"]["reports"] = config["dir"]["results"];

dir_reports = os.path.join(config["dir"]["base"], config["dir"]["reports"])

# Rule
rule dot_graph:
    """This rule generates dot files for snakemake's DAG and rulegraph. 

    Copyright Claire Rioualen
    """
    output: dir_reports + "/{graph}.dot"
    params: snakefile = os.path.join(config["dir"]["base"], workflow.snakefile), configfile = os.path.join(config["dir"]["base"], config["metadata"]["configfile"]), \
        qsub=config["qsub"] \
          + " -e " + dir_reports + "/{graph}_dot_qsub.err" \
          + " -o " + dir_reports + "/{graph}_dot_qsub.out"
    log: dir_reports + "/{graph}_dot.log"
    benchmark: dir_reports + "/{graph}_dot_benchmark.json"
    shell: """
(snakemake -s {params.snakefile}  --configfile  {params.configfile} --{wildcards.graph} > {output}
#if {wildcards.graph} == "dag" cat output | perl -pe 's/graph\[/graph\[rankdir='LR', /'  ## TODO
sed -n '/digraph/,$p' <{output} > tmp
mv tmp {output}) &> {log}
"""
