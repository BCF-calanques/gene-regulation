# Set defaults params
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param metadata/strands must be defined when analysing paired end data")

if not "sickle" in config.keys():
    config["sickle"] = {}

if not "threshold" in config["sickle"].keys():
    config["sickle"]["threshold"] = "20"

if not "qual" in config["sickle"].keys():
    config["sickle"]["qual"] = "sanger"

if not "fastq" in config["dir"].keys():
    sys.exit("config['dir']['fastq'] must be in the config file.")

suffix = "sickle"
fastq_dir = config["dir"]["fastq"]


# Define input files
def sickle_inputs(wildcards):
    seq_type = config["metadata"]["seq_type"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}/{samples}/{samples}_{strand}.fastq", strand=config["metadata"]["strands"].split(), samples=wildcards.samples, fastq_dir=fastq_dir)
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}/{samples}/{samples}.fastq", samples=wildcards.samples, fastq_dir=fastq_dir)
    else:
        sys.exit("Error: invalid sequencing type parameter. Must be 'se' or 'pe'")
    return reads

# Rule
rule sickle_se:
    """Trim one a single end raw reads file with sickle.

    Required parameters:
        config["qsub"]
        config["dir"]["fastq"]
        config["metadata"]["seq_type"]

    Optional parameters:
        config["sickle"]["threshold"]
        config["sickle"]["qual"]
        config["metadata"]["strands"]

    Authors Claire Rioualen, Lucie Khamvongsa
    """
    input: reads = sickle_inputs
    output:
        single = fastq_dir + "/{samples}/{samples}_" + suffix + ".fastq"
    params:
        threshold = config["sickle"]["threshold"],
        qual_type = config["sickle"]["qual"],
        qsub = config['qsub'] \
            + " -e "+ fastq_dir + "/{samples}/{samples}_" + suffix + "_qsub.err" \
            + " -o "+ fastq_dir + "/{samples}/{samples}_" + suffix + "_qsub.out"
    log: fastq_dir + "/{samples}/{samples}_" + suffix + ".log"
    benchmark: fastq_dir + "/{samples}/{samples}_" + suffix + "_benchmark.json"
    run:
#        if (seq_type == "pe"):

#            shell("sickle pe --pe-file1 " + input.reads[0] + " --pe-file2 " + input.reads[1] + " --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} 2> {log}")
#        elif (seq_type == "se"):
            shell("sickle se --fastq-file {input} --qual-type {params.qual_type} --output-file {output.single} &> {log}")

rule sickle_pe:
    """Trim one a single end raw reads file with sickle.

    Required parameters:
        config["qsub"]
        config["dir"]["fastq"]
        config["metadata"]["seq_type"]

    Optional parameters:
        config["sickle"]["threshold"]
        config["sickle"]["qual"]
        config["metadata"]["strands"]

    Copyright:
        Claire Rioualen, Lucie Khamvongsa
    """
    input: reads = sickle_inputs
    output:
        forward = fastq_dir + "/{samples}/{samples}_" + suffix + "_R1.fastq",
        reverse = fastq_dir + "/{samples}/{samples}_" + suffix + "_R2.fastq"
    params:
        single = fastq_dir + "/{samples}/{samples}_" + suffix + ".fastq",
        threshold = config["sickle"]["threshold"],
        qual_type = config["sickle"]["qual"],
        qsub = config['qsub'] \
            + " -e "+ fastq_dir + "/{samples}/{samples}_" + suffix + "_qsub.err" \
            + " -o "+ fastq_dir + "/{samples}/{samples}_" + suffix + "_qsub.out"
    log: fastq_dir + "/{samples}/{samples}_" + suffix + ".log"
    benchmark: fastq_dir + "/{samples}/{samples}_" + suffix + "_benchmark.json"
    run:
#        if (seq_type == "pe"):

            shell("sickle pe --pe-file1 " + input.reads[0] + " --pe-file2 " + input.reads[1] + " --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {params.single} 2> {log}")
#        elif (seq_type == "se"):
#            shell("sickle se --fastq-file {input} --qual-type {params.qual_type} --output-file {output.single} &> {log}")

#rule sickle:
#    """Trim one a single end raw reads file with sickle.

#    Required parameters:
#        config["qsub"]
#        config["metadata"]["seq_type"]

#    Optional parameters:
#        config["sickle"]["threshold"]
#        config["sickle"]["qual"]
#        config["metadata"]["strands"]

#    Authors:
#        Claire Rioualen, Lucie Khamvongsa
#    """
#    input: reads = sickle_inputs
#    output:
#        forward = config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + "_R1.fastq",
#        reverse = config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + "_R2.fastq",
#        single = config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + ".fastq"
#    params:
#        threshold = config["sickle"]["threshold"],
#        qual_type = config["sickle"]["qual"],
#        qsub = config['qsub'] \
#            + " -e "+ config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + "_qsub.err" \
#            + " -o "+ config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + "_qsub.out"
#    log: config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + ".log"
#    benchmark: config["dir"]["fastq"] + "/{samples}/{samples}_" + suffix + "_benchmark.json"
#    run:
#        if (seq_type == "pe"):

#            shell("sickle pe --pe-file1 " + input.reads[0] + " --pe-file2 " + input.reads[1] + " --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} 2> {log}")
#        elif (seq_type == "se"):
#            shell("sickle se --fastq-file {input} --qual-type {params.qual_type} --output-file {output.single} &> {log}")

